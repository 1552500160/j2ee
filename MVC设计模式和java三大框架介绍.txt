                                     JAVA三大框架及MVC设计模式
  MVC 编程模式
MVC 是一种使用 MVC（Model View Controller 模型-视图-控制器）设计创建 Web 应用程序的模式： 
Model（模型）表示应用程序核心（比如数据库记录列表）。
View（视图）显示数据（数据库记录）。
Controller（控制器）处理输入（写入数据库记录）。
MVC 模式同时提供了对 HTML、CSS 和 JavaScript 的完全控制。
Model（模型）是应用程序中用于处理应用程序数据逻辑的部分。
　　通常模型对象负责在数据库中存取数据。
View（视图）是应用程序中处理数据显示的部分。
　　通常视图是依据模型数据创建的。
Controller（控制器）是应用程序中处理用户交互的部分。
　　通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。
MVC 分层有助于管理复杂的应用程序，因为您可以在一个时间内专门关注一个方面。例如，您可以在不依赖业务逻辑的情况下专注于视图设计。同时也让应用程序的测试更加容易。
MVC 分层同时也简化了分组开发。不同的开发人员可同时开发视图、控制器逻辑和业务逻辑。
框架内容
MVC指MVC模式的某种框架，它强制性的使应用程序的输入、处理和输出分开。使用MVC应用程序被分成三个核心部件：模型、视图、控制器。它们各自处理自己的任务。最典型的MVC就是JSP + servlet + javabean的模式。 
 视图
视图是用户看到并与之交互的界面。对老式的Web应用程序来说，视图就是由HTML元素组成的界面，在新式的Web应用程序中，HTML依旧在视图中扮演着重要的角色，但一些新的技术已层出不穷，它们包括Adobe Flash和像XHTML，XML/XSL,WML等一些标识语言和Web services.
MVC好处是它能为应用程序处理很多不同的视图。在视图中其实没有真正的处理发生，不管这些数据是联机存储的还是一个雇员列表，作为视图来讲，它只是作为一种输出数据并允许用户操纵的方式。  
模型
模型表示企业数据和业务规则。在MVC的三个部件中，模型拥有最多的处理任务。例如它可能用像EJBs和ColdFusion Components这样的构件对象来处理数据库，被模型返回的数据是中立的，就是说模型与数据格式无关，这样一个模型能为多个视图提供数据，由于应用于模型的代码只需写一次就可以被多个视图重用，所以减少了代码的重复性。  
控制器
控制器接受用户的输入并调用模型和视图去完成用户的需求，所以当单击Web页面中的超链接和发送HTML表单时，控制器本身不输出任何东西和做任何处理。它只是接收请求并决定调用哪个模型构件去处理请求，然后再确定用哪个视图来显示返回的数据。
  JAVA三大框架：Struts+Hibernate+Spring
 Java三大框架主要用来做WEN应用。
 Struts主要负责表示层的显示
 Spring利用它的IOC和AOP来处理控制业务（负责对数据库的操作）
 Hibernate主要是数据持久化到数据库
   再用jsp的servlet做网页开发的时候有个 web.xml的映射文件，里面有一个mapping的标签就是用来做文件映射的。当你在浏览器上输入URL得知的时候，文件就会根据你写的名称对应到一 个JAVA文件，根据java文件里编写的内容显示在浏览器上，就是一个网页。
         一 .Struts框架：struts是开源软件。使用Struts的目的是为了帮助我们减少在运用MVC设计模型来开发Web应用的时间。如果我们想混合使用Servlets和JSP的优点来建立可扩展的应用，struts是一个不错的选择。
    1．流程：服务器启动后，根据web.xml加载ActionServlet读取struts-config.xml文件内容到内存。
    2．架构：Struts对Model，View和Controller都提供了对应的组件。ActionServlet，这个类是Struts的核心控制器，负责拦截来自用户的请求。
        Model部分：由JavaBean组 成，ActionForm用于封装用户的请求参数，封装成ActionForm对象，该对象被ActionServlet转发给 Action，Action根据ActionFrom里面的请求参数处理用户的请求。JavaBean则封装了底层的业务逻辑，包括数据库访问等。
View部分：该部分采用JSP实现。Struts提供了丰富的标签库，通过标签库可以减少脚本的使用，自定义的标签库可以实现与Model的有效交互，并增加了现实功能。对应上图的JSP部分。
   Controller组件：Controller组件有两个部分组成――系统核心 控制器，业务逻辑控制器。 　　系统核心控制器，对应上图的ActionServlet。该控制器由Struts框架提供，继承HttpServlet 类，因此可以配置成标注的Servlet。该控制器负责拦截所有的HTTP请求，然后根据用户请求决定是否要转给业务逻辑控制器。业务逻辑控制器，负责处 理用户请求，本身不具备处理能力，而是调用Model来完成处理。对应Action部分。
 二．Spring框架
Spring是一个解决了许多在J2EE开发中常见的的问题的强大框架。 Springle提供了管理业务对象的一致方法并且鼓励了注入对接口编程而不是对类变成的好习惯。Spring的架构基础是基于使用JavaBean属性 的Inversion of Control 容器。然而Spring在使用IoC容器作为构建玩关注所有架构层层的完整解决方案方面是独一无二的。Spring提供了唯一的数据管理 抽象包括简单和有效率的JDBC框架，极大的改进了效率并且减少了可能的错误。Spring的数据访问架构还集成了Hibernate和其他O/R mapping 解决方案。
三．Hibernate框架
Hibernate 是一个开源代码的对象关系映射框架，对JDBC惊醒了费城轻量级的 的对象封装，使得Java程序员可以随心所欲的使用对象变成思维来操作数据库。Hebernate可以应用在任何使用JDBC的场合，既可以在java的 客户端程序使用，也可以在Servlet/JSP的Web应用中使用最具革命意义的事，Hibernate可以在应用EJB的J2EE架构中取代CMP, 完成数据持久化的重任
Hibernate的核心接口一共有5个，分别为:Session、 SessionFactory、Transaction、Query和Configuration。这5个核心接口在任何开发中都会用到。通过这些接口， 不仅可以对持久化对象进行存取，还能够进行事务控制。下面对这五个核心接口分别加以介绍。
1．Session接口：负责执行被持久化对象的CRUD操作(CRUD的任务是完成与 数据库的交流，包含了很多常见的SQL语句。)。但需要注意的是Session对象是非线程安全的。同时，Hibernate的session不同于 JSP应用中的HttpSession。这里当使用session这个术语时，其实指的是Hibernate中的session，而以后会将 HttpSession对象称为用户session。
2．SessionFactory接口：负责初始化Hibernate。它充当数据存储 源的代理，并负责创建Session对象。这里用到了工厂模式。需要注意的是SessionFactory并不是轻量级的，因为一般情况下，一个项目通常 只需要一个SessionFactory就够，当需要操作多个数据库时，可以为每个数据库指定一个SessionFactory。
3．Configuration接口：负责配置并启动Hibernate，创建SessionFactory对象。在Hibernate的启动的过程中，Configuration类的实例首先定位映射文档位置、读取配置，然后创建SessionFactory对象。
4．Transaction接口：负责事务相关的操作。它是可选的，开发人员也可以设计编写自己的底层事务处理代码。
5．Query和Criteria接口：负责执行各种数据库查询。它可以使用HQL语言或SQL语句两种表达方式。
